{"remainingRequest":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\src\\components\\Sidentify.vue?vue&type=style&index=0&id=4bfe2602&scoped=true&lang=scss&","dependencies":[{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\src\\components\\Sidentify.vue","mtime":1716716578732},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1716463264216},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1716463268123},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1716463266576},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1716463267576},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716463263622},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1716463268123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoucy1jYW52YXMgew0KICBjdXJzb3I6IHBvaW50ZXI7DQp9DQo="},{"version":3,"sources":["Sidentify.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA","file":"Sidentify.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"s-canvas\">\r\n    <canvas id=\"s-canvas\" :width=\"props.contentWidth\" :height=\"props.contentHeight\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, watch } from 'vue'\r\n\r\n// eslint-disable-next-line no-undef\r\nconst props = defineProps({\r\n  identifyCode: {\r\n    type: String,\r\n    default: '1234'\r\n  },\r\n  fontSizeMin: {\r\n    type: Number,\r\n    default: 25\r\n  },\r\n  fontSizeMax: {\r\n    type: Number,\r\n    default: 35\r\n  },\r\n  backgroundColorMin: {\r\n    type: Number,\r\n    default: 255\r\n  },\r\n  backgroundColorMax: {\r\n    type: Number,\r\n    default: 255\r\n  },\r\n  colorMin: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  colorMax: {\r\n    type: Number,\r\n    default: 160\r\n  },\r\n  lineColorMin: {\r\n    type: Number,\r\n    default: 40\r\n  },\r\n  lineColorMax: {\r\n    type: Number,\r\n    default: 180\r\n  },\r\n  dotColorMin: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  dotColorMax: {\r\n    type: Number,\r\n    default: 255\r\n  },\r\n  contentWidth: {\r\n    type: Number,\r\n    default: 112\r\n  },\r\n  contentHeight: {\r\n    type: Number,\r\n    default: 40\r\n  }\r\n})\r\n// 生成一个随机数\r\nconst randomNum = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n\r\n// 生成一个随机的颜色\r\nconst randomColor = (min, max) => {\r\n  let r = randomNum(min, max)\r\n  let g = randomNum(min, max)\r\n  let b = randomNum(min, max)\r\n  return 'rgb(' + r + ',' + g + ',' + b + ')'\r\n}\r\n\r\n// 绘制干扰线\r\nconst drawLine = (ctx) => {\r\n  for (let i = 0; i < 5; i++) {\r\n    ctx.strokeStyle = randomColor(props.lineColorMin, props.lineColorMax)\r\n    ctx.beginPath()\r\n    ctx.moveTo(randomNum(0, props.contentWidth), randomNum(0, props.contentHeight))\r\n    ctx.lineTo(randomNum(0, props.contentWidth), randomNum(0, props.contentHeight))\r\n    ctx.stroke()\r\n  }\r\n}\r\n//在画布上显示数据\r\nconst drawText = (ctx, txt, i) => {\r\n  ctx.fillStyle = randomColor(props.colorMin, props.colorMax)\r\n  ctx.font = randomNum(props.fontSizeMin, props.fontSizeMax) + 'px SimHei'\r\n  let x = (i + 1) * (props.contentWidth / (props.identifyCode.length + 1))\r\n  let y = randomNum(props.fontSizeMax, props.contentHeight - 5)\r\n  var deg = randomNum(-45, 45)\r\n  // 修改坐标原点和旋转角度\r\n  ctx.translate(x, y)\r\n  ctx.rotate((deg * Math.PI) / 180)\r\n  ctx.fillText(txt, 0, 0)\r\n  // 恢复坐标原点和旋转角度\r\n  ctx.rotate((-deg * Math.PI) / 180)\r\n  ctx.translate(-x, -y)\r\n}\r\n// 绘制干扰点\r\nconst drawDot = (ctx) => {\r\n  for (let i = 0; i < 80; i++) {\r\n    ctx.fillStyle = randomColor(0, 255)\r\n    ctx.beginPath()\r\n    ctx.arc(randomNum(0, props.contentWidth), randomNum(0, props.contentHeight), 1, 0, 2 * Math.PI)\r\n    ctx.fill()\r\n  }\r\n}\r\n//画图\r\nconst drawPic = () => {\r\n  let canvas = document.getElementById('s-canvas')\r\n  let ctx = canvas.getContext('2d')\r\n  ctx.textBaseline = 'bottom'\r\n  // 绘制背景\r\n  ctx.fillStyle = randomColor(props.backgroundColorMin, props.backgroundColorMax)\r\n  ctx.fillRect(0, 0, props.contentWidth, props.contentHeight)\r\n  // 绘制文字\r\n  for (let i = 0; i < props.identifyCode.length; i++) {\r\n    drawText(ctx, props.identifyCode[i], i)\r\n  }\r\n  drawLine(ctx)\r\n  drawDot(ctx)\r\n}\r\n//组件挂载\r\nonMounted(() => {\r\n  drawPic()\r\n})\r\n// 监听\r\nwatch(\r\n  () => props.identifyCode,\r\n  () => {\r\n    drawPic()\r\n  }\r\n)\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.s-canvas {\r\n  cursor: pointer;\r\n}\r\n</style>"]}]}