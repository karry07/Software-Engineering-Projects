{"remainingRequest":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\src\\views\\modules\\employment\\list.vue?vue&type=template&id=3f0a84af&scoped=true&","dependencies":[{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\src\\views\\modules\\employment\\list.vue","mtime":1716646074355},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716463263622},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1716463268123},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716463263622},{"path":"E:\\git仓库\\github\\Software-Engineering-Projects\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1716463268123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}